from telegram import Update
from telegram import KeyboardButton, ReplyKeyboardMarkup
from telegram.ext import Application, MessageHandler, filters, ContextTypes, CommandHandler
import database
import chroma_db
from llm_processing import llm_response
import tempfile
import whisper
import subprocess
import os
from dotenv import load_dotenv

load_dotenv()
whisper_model = whisper.load_model("base")

BOT_TOKEN = os.getenv("TELEGRAM_TOKEN")
database.init_db()

# show the keyboard when the bot starts
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç-–ø–æ–º–æ—â–Ω–∏–∫.\n–¢—ã –º–æ–∂–µ—à—å –ø–∏—Å–∞—Ç—å –º–Ω–µ –∑–∞–º–µ—Ç–∫–∏ —Ç–µ–∫—Å—Ç–æ–º –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –≥–æ–ª–æ—Å–æ–≤—ã–º–∏ —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏.\n–ü–æ—Ç–æ–º —è —Å–º–æ–≥—É –æ—Ç–≤–µ—á–∞—Ç—å —Ç–µ–±–µ –Ω–∞ –æ—Å–Ω–æ–≤–µ —ç—Ç–∏—Ö –∑–∞–º–µ—Ç–æ–∫üöÄ",
        reply_markup=note_keyboard
    )

# keyboard with button to create a note
note_keyboard = ReplyKeyboardMarkup(
    [[KeyboardButton("üìù –°–æ–∑–¥–∞—Ç—å –∑–∞–º–µ—Ç–∫—É")]],
    resize_keyboard=True,
    is_persistent=True
)

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    userid = update.message.from_user.id

    if 'awaiting_note' not in context.user_data:
        context.user_data['awaiting_note'] = False

    # Voice message
    if update.message.voice:
        try:
            voice_file = await update.message.voice.get_file()
            
            with tempfile.NamedTemporaryFile(suffix='.ogg', delete=False) as f:
                temp_path = f.name
            
            await voice_file.download_to_drive(temp_path)
            
            wav_path = temp_path.replace('.ogg', '.wav')
            subprocess.run(['ffmpeg', '-i', temp_path, '-ar', '16000', '-ac', '1', wav_path], 
                         stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)
            
            result = whisper_model.transcribe(wav_path, language='ru')
            text = result['text']
            await update.message.reply_text(f"üé§ –†–∞—Å–ø–æ–∑–Ω–∞–Ω–æ: {text}")
            
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ: {e}")
            await update.message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ")
            return
        finally:
            for f in [temp_path, wav_path]:
                try:
                    if os.path.exists(f):
                        os.unlink(f)
                except:
                    pass
    else:
        text = update.message.text

    # Creating a note
    if text == "üìù –°–æ–∑–¥–∞—Ç—å –∑–∞–º–µ—Ç–∫—É":
        context.user_data["awaiting_note"] = True
        await update.message.reply_text("–ù–∞–ø–∏—à–∏—Ç–µ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤ –≥–æ–ª–æ—Å–æ–≤–æ–º –≤–∞—à—É –∑–∞–º–µ—Ç–∫—É")
    
    # Accepts the note text
    elif context.user_data["awaiting_note"]:
        context.user_data["awaiting_note"] = False
        chunk_ids = chroma_db.save_vectorized_note(userid, text)
        database.save_note(userid, text, chunk_ids)
        await update.message.reply_text("–ó–∞–º–µ—Ç–∫–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–∏—Å–∞–Ω–∞! –Ø –∑–∞–ø–æ–º–Ω—é –µ—ë –∏ —Å–º–æ–≥—É –ø–æ–º–æ—á—å –≤–∞–º –≤ –±—É–¥—É—â–µ–º.")
    
    # User query
    else:
        result = llm_response(text, userid)
        await update.message.reply_text(result)


def main():
    app = Application.builder().token(BOT_TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    app.add_handler(MessageHandler(filters.VOICE, handle_message))    
    app.run_polling()

if __name__ == "__main__":
    main()